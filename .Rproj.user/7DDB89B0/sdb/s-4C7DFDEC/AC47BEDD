{
    "collab_server" : "",
    "contents" : "#######在R语言中，变量本身没有声明任何数据类型，而是获取分配给它的R - 对象的数据类型。 所以R称为动态类型语言，这意味着我们可以在程序中使用同一个变量时，一次又一次地更改变量的数据类型。#######\n\nvar_x <- \"Hello\"\ncat(\"The class of var_x is \",class(var_x),\"\n\")###cat: Concatenate and Print \n\nvar_x <- 34.5\ncat(\"  Now the class of var_x is \",class(var_x),\"\n\")\n\nvar_x <- 27L\ncat(\"   Next the class of var_x becomes \",class(var_x),\"\n\")\n\n#####所有大于1的数字被认为是逻辑值TRUE。#######\nv <- c(3,0,TRUE,2+2i)\nt <- c(4,0,FALSE,2+3i)\nprint(v|t)\nprint(v&t)\n\nv <- c(3,0,TRUE,2+2i)\nt <- c(1,3,TRUE,2+3i)\nprint(v&&t)\n\nt <- c(0,3,TRUE,2+3i)\nprint(v||t)\n\n######运算符#######\n###%in% 逻辑in\nv1 <- 8\nv2 <- 12\nt <- 1:10\nprint(v1 %in% t) \nprint(v2 %in% t) \n\n###%*%矩阵乘\nM = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)\nM1 = matrix( c(3,6,3,6,10,4), nrow = 3,ncol = 2,byrow = TRUE)\nt = M %*% t(M)\nt1 = M %*% M1\nprint(t)\nprint(t1)\n\n######package#######\n#包含R包的库位置\n.libPaths()\n#环境下的package\nsearch()\ndetach()\n\n####switch#######\nx <- switch(\n  3,\n  \"first\",\n  \"second\",\n  \"third\",\n  \"fourth\"\n)\nprint(x)\n\n#####repeat#######\nv <- c(\"Hello\",\"loop\")\ncnt <- 2\n\nrepeat {\n  print(v)\n  cnt <- cnt+1\n  \n  if(cnt > 5) {\n    break\n  }\n}\n\n#####next#####\nv <- LETTERS[1:6]\nfor ( i in v) {\n  \n  if (i == \"D\") {\n    next\n  }\n  print(i)\n}\n\n#####merge#####\nlibrary(MASS)\nmerged.Pima <- merge(x = Pima.te, y = Pima.tr,\n                     by.x = c(\"bp\", \"bmi\"),\n                     by.y = c(\"bp\", \"bmi\")\n)\nprint(merged.Pima)\nnrow(merged.Pima)\n\n#####melt()拆分数据和cast()数据重构#####\nlibrary(reshape2)\nlibrary(knitr)\nlibrary(MASS)\nprint(ships)\nmolten.ships <- melt(ships, id = c(\"type\",\"year\"))\nprint(molten.ships)\n\n#acast：返回向量/矩阵/数组\n#dcast：返回数据框\nrecasted.ship <- dcast(molten.ships, type+year~variable,sum)\nprint(recasted.ship)\n\n#####string#####\n#paste(..., sep = \" \", collapse = NULL)\na <- \"Hello\"\nb <- 'How'\nc <- \"are you? \"\n\nprint(paste(a,b,c))\n\nprint(paste(a,b,c, sep = \"-\"))\n\nprint(paste(a,b,c, sep = \"\", collapse = \"\"))\n\n#####format#####\n# Total number of digits displayed. Last digit rounded off.\nresult <- format(23.123456789, digits = 9)\nprint(result)\n\n# Display numbers in scientific notation.\nresult <- format(c(6, 13.14521), scientific = TRUE)\nprint(result)\n\n# The minimum number of digits to the right of the decimal point.\nresult <- format(23.47, nsmall = 5)\nprint(result)\n\n# Format treats everything as a string.\nresult <- format(6)\nprint(result)\n\n# Numbers are padded with blank in the beginning for width.\nresult <- format(13.7, width = 6)\nprint(result)\n\n# Left justify strings.\nresult <- format(\"Hello\", width = 8, justify = \"l\")\nprint(result)\n\n# Justfy string with center.\nresult <- format(\"Hello\", width = 8, justify = \"c\")\nprint(result)\n\n####string 位数#####\nresult <- nchar(\"Count the number of characters\")\nprint(result)\n\n#####string操作#####\n# Changing to Upper case.\nresult <- toupper(\"Changing To Upper\")\nprint(result)\n\n# Changing to lower case.\nresult <- tolower(\"Changing To Lower\")\nprint(result)\n\n# Extract characters from 5th to 7th position.\nresult <- substring(\"Extract\", 5, 7)\nprint(result)\n\n#####向量#####\n#Creating a sequence from 5 to 13.\nv <- 5:13\nprint(v)\n\n# Creating a sequence from 6.6 to 12.6.\nv <- 6.6:12.6\nprint(v)\n\n# If the final element specified does not belong to the sequence then it is discarded.\nv <- 3.8:11.4\nprint(v)\n\n# Accessing vector elements using 0/1 indexing.\ny <- t[c(0,0,0,0,0,0,1)]\nprint(y)\n\n###向量元素回收： 如果我们对不等长的两个向量应用算术运算，则较短向量的元素被循环以完成操作。\nv1 <- c(3,8,4,5,0,11)\nv2 <- c(4,11)\n# V2 becomes c(4,11,4,11,4,11)\n\nadd.result <- v1+v2\nprint(add.result)\n\nsub.result <- v1-v2\nprint(sub.result)\n\n#####列表list#####\n# Create a list containing strings, numbers, vectors and a logical values.\nlist_data <- list(\"Red\", \"Green\", c(21,32,11), TRUE, 51.23, 119.1)\nprint(list_data)\n\n#合并\n# Create two lists.\nlist1 <- list(1,2,3)\nlist2 <- list(\"Sun\",\"Mon\",\"Tue\")\n\n# Merge the two lists.\nmerged.list <- c(list1,list2)\n\n# Print the merged list.\nprint(merged.list)\n\n#转向量\n# Create lists.\nlist1 <- list(1:5)\nprint(list1)\n\nlist2 <-list(10:14)\nprint(list2)\n\n# Convert the lists to vectors.\nv1 <- unlist(list1)\nv2 <- unlist(list2)\n\nprint(v1)\nprint(v2)\n\n# Now add the vectors\nresult <- v1+v2\nprint(result)\n\n#####矩阵#####\n# Elements are arranged sequentially by row.\nM <- matrix(c(3:14), nrow = 4, byrow = TRUE)\nprint(M)\n\n# Elements are arranged sequentially by column.\nN <- matrix(c(3:14), nrow = 4, byrow = FALSE)\nprint(N)\n\n# Define the column and row names.\nrownames = c(\"row1\", \"row2\", \"row3\", \"row4\")\ncolnames = c(\"col1\", \"col2\", \"col3\")\n\nP <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))\nprint(P)\n\n#####数组array#####\nvector <- c(5,9,3,10,11,12,13,14,15)\ncolumn.names <- c(\"COL1\",\"COL2\",\"COL3\")\nrow.names <- c(\"ROW1\",\"ROW2\",\"ROW3\")\nmatrix.names <- c(\"Matrix1\",\"Matrix2\")\n\n# Take these vectors as input to the array.\nnew.array <- array(vector,dim = c(3,3,2),dimnames = list(row.names,column.names,\n                                                                  matrix.names))\nprint(new.array)\n\n##跨数组元素的计算 apply\nif(FALSE){\n  \"MARGIN: a vector giving the subscripts which the function will be applied over. E.g., for a matrix 1 indicates rows, 2 indicates columns, c(1, 2) indicates rows and columns. Where X has named dimnames, it can be a character vector selecting dimension names.\"\n}\n# Use apply to calculate the sum of the rows across all the matrices.\nresult <- apply(new.array, c(1,2), sum)\nprint(result)\n\nresult <- apply(new.array, c(1), sum)\nprint(result)\n\nresult <- apply(new.array, c(2), sum)\nprint(result)\n\n#####factor 因子#####\n# Create a vector.\napple_colors <- c('green','green','yellow','red','red','red','green')\n\n# Create a factor object.\nfactor_apple <- factor(apple_colors)\n\n# Print the factor.\nprint(factor_apple)\nprint(nlevels(factor_apple))\n\n#在创建具有文本数据列的任何数据框时，R语言将文本列视为分类数据并在其上创建因子。\n# Create the vectors for data frame.\nheight <- c(132,151,162,139,166,147,122)\nweight <- c(48,49,66,53,67,52,40)\ngender <- c(\"male\",\"male\",\"female\",\"female\",\"male\",\"female\",\"male\")\n\n# Create the data frame.\ninput_data <- data.frame(height,weight,gender)\nprint(input_data)\n\n# Test if the gender column is a factor.\nprint(is.factor(input_data$gender))\n\n# Print the gender column so see the levels.\nprint(input_data$gender)\n\n##update orders\ndata <- c(\"East\",\"West\",\"East\",\"North\",\"North\",\"East\",\"West\",\"West\",\"West\",\"East\",\"North\")\n# Create the factors\nfactor_data <- factor(data)\nprint(factor_data)\n\n# Apply the factor function with required order of the level.\nnew_order_data <- factor(factor_data,levels = c(\"East\",\"West\",\"North\"))\nprint(new_order_data)\n\n##generate factor level n是给出级数的整数;k是给出复制数目的整数;labels是所得因子水平的标签向量。\nv <- gl(3, 4, labels = c(\"Tampa\", \"Seattle\",\"Boston\"))\nprint(v)\n\n#####dataframe\n#添加行:要将更多行永久添加到现有数据帧，我们需要引入与现有数据帧相同结构的新行，并使用rbind()函数。\n# Create the first data frame.\nemp.data <- data.frame(\n  emp_id = c (1:5), \n  emp_name = c(\"Rick\",\"Dan\",\"Michelle\",\"Ryan\",\"Gary\"),\n  salary = c(623.3,515.2,611.0,729.0,843.25), \n  \n  start_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",\n                         \"2015-03-27\")),\n  dept = c(\"IT\",\"Operations\",\"IT\",\"HR\",\"Finance\"),\n  stringsAsFactors = FALSE\n)\n\n# Create the second data frame\nemp.newdata <- \tdata.frame(\n  emp_id = c (6:8), \n  emp_name = c(\"Rasmi\",\"Pranab\",\"Tusar\"),\n  salary = c(578.0,722.5,632.8), \n  start_date = as.Date(c(\"2013-05-21\",\"2013-07-30\",\"2014-06-17\")),\n  dept = c(\"IT\",\"Operations\",\"Fianance\"),\n  stringsAsFactors = FALSE\n)\n\n# Bind the two data frames.\nemp.finaldata <- rbind(emp.data,emp.newdata)\nprint(emp.finaldata)\n",
    "created" : 1577104366196.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3978295216",
    "id" : "AC47BEDD",
    "lastKnownWriteTime" : 1577107765,
    "last_content_update" : 1577107765165,
    "path" : "~/Desktop/W3CLearning/Notes01basic.R",
    "project_path" : "Notes01basic.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}